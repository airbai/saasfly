import { kv } from '@vercel/kv'
import { CustomStream, StreamingTextResponse } from 'ai'
import { Configuration, CustomApi } from 'custom-edge'
import NextAuth from "next-auth";
import { getServerSession, type NextAuthOptions, type User } from "next-auth";

import { nanoid } from '~/lib/utils'
import { authOptions } from "@saasfly/auth";


//export const runtime = 'edge'

export async function POST(req: Request) {
  const json = await req.json()
  const { messages, previewToken } = json
  const session = await getServerSession(authOptions);
  if (process.env.VERCEL_ENV !== 'preview') {
    if (session == null) {
      return new Response('Unauthorized', { status: 401 })
    }
  }

  const apiUrl = process.env.GPT_API_BASE_URL as string
  const apiKey = process.env.GPT_API_KEY as string
  const model = process.env.GPT_API_MODEL as string

  const configuration = new Configuration({
    apiKey: previewToken || apiKey,
    basePath: apiUrl,
    baseOptions: {
      headers: {
        "api-key": apiKey,
      },
    },
  })

  const custom = new CustomApi(configuration)

  const res = await custom.createChatCompletion({
    model: model,
    messages,
    temperature: 0.7,
    stream: true
  })

  const stream = CustomStream(res, {
    async onCompletion(completion) {
      const title = json.messages[0].content.substring(0, 100)
      const userId = session?.user.id
      if (userId) {
        const id = json.id ?? nanoid()
        const createdAt = Date.now()
        const path = `/chat/${id}`
        const payload = {
          id,
          title,
          userId,
          createdAt,
          path,
          messages: [
            ...messages,
            {
              content: completion,
              role: 'assistant'
            }
          ]
        }
        await kv.hmset(`chat:${id}`, payload)
        await kv.zadd(`user:chat:${userId}`, {
          score: createdAt,
          member: `chat:${id}`
        })
      }
    }
  })

  return new StreamingTextResponse(stream)
}
